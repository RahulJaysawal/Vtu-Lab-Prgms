----------------------------
prgm-1a.l
----------------------------
%{
#include<stdio.h>
int v=0,op=0,id=0,flag=0;
%}

%%
[0-9][0-9]* {id++;printf("\nIdentifier:");ECHO;}
[\+\-\*\/\=] {op++;printf("\nOperartor:");ECHO;}
"(" {v++;}
")" {v--;}
";" {flag=1;}
.|\n {return 0;}
%%

int main()
{
	printf("Enter the expression:\n");
	yylex();
	if((op+1) ==id && v==0 && flag==0)
	{
		printf("\n\nIdentifiers are:%d\nOperators are:%d\n",id,op);
		printf("\nExpression is Valid\n");
	}
	else
		printf("\nExpression is Invalid\n");
	return 1;
}
int yywrap()
{
	return 1;
}

----------------------------
prgm-1b.l
----------------------------

%{
#include "y.tab.h"
extern yylval;
%}

%%
[0-9]+ 		{yylval=atoi(yytext);return num;}
[\+\-\*\/] 	{return yytext[0];}
[)] 		{return yytext[0];}
[(] 		{return yytext[0];}
. 			{;}
\n 			{return 0;}
%%

----------------------------
prgm-1b.y
----------------------------

%{
#include<stdio.h>
#include<stdlib.h>
%}

%token num
%left '+' '-'
%left '*' '/'

%%
input:exp {printf("%d\n",$$);exit(0);}
exp:	exp'+'exp {$$=$1+$3;}
		|exp'-'exp{$$=$1-$3;}
		|exp'*'exp{$$=$1*$3;}
		|exp'/'exp { if($3==0){printf("Divide by Zero. Invalid expression.\n");exit(0);}
		else $$=$1/$3;}
		|'('exp')'{$$=$2;}
		|num{$$=$1;};
%%

int yyerror()
{
	printf("Error. Invalid Expression.\n");
	exit(0);
}
int main()
{
	printf("Enter an expression:\n");
	yyparse();
}

----------------------------
prgm-2.l
----------------------------
%{
#include "y.tab.h"
%}
%%
a 		{return A;}
b 		{return B;}
[\n]	return '\n';
%%

----------------------------
prgm-2.y
----------------------------

%{
#include<stdio.h>
#include<stdlib.h>
%}
%token A B
%%
input:	s'\n' {printf("Successful Grammar\n");exit(0);}
		s: A s1 B| B
		s1: ; | A s1
%%
main()
{
	printf("\nEnter A String\n");
	yyparse();
}
int yyerror()
{
	printf("\nError \n");
	exit(0);
}
----------------------------
prgm-6a.l
----------------------------
%{
#include<stdio.h>
int sl=0;
int ml=0;
%}
%%
"/*"[a-zA-Z0-9' '\t\n]+"*/"	ml++;
"//".*	sl++;
%%

main()
{
	yyin=fopen("f1.c","r");
	yyout=fopen("f2.c","w");
	yylex();
	// fclose(yyin);
	// fclose(yyout);
	printf("\n Number of single line comments are = %d\n",sl); printf("\nNumber of multiline comments are =%d\n",ml);
}

----------------------------
prgm-6b.l
----------------------------
%{
#include"y.tab.h"
#include <stdio.h>
#include <stdlib.h>
extern yylval;
%}

%%

[ \t];
[+|-|*|/|=|<|>] {printf("operator is %s\n",yytext);return OP;}
[0-9]+ {yylval = atoi(yytext); printf("numbers is %d\n",yylval); return DIGIT;} 
int|char|bool|float|void|for|do|while|if|else|return|void {printf("keyword is %s\n",yytext);return KEY;}
[a-zA-Z0-9]+ {printf("identifier is %s\n",yytext);return ID;}
. ;

%%

----------------------------
prgm-6b.y
----------------------------
%{
#include <stdio.h>
#include <stdlib.h>
int id=0, dig=0, key=0, op=0;
%}
%token DIGIT ID KEY OP

%%
input:
DIGIT input { dig++; }
| ID input { id++; }
| KEY input { key++; }
| OP input {op++;}
| DIGIT { dig++; }
| ID { id++; }
| KEY { key++; }
| OP { op++;}
;
%%

extern FILE *yyin;
main() 
{
	FILE *myfile = fopen("6a.c", "r"); 
	if (!myfile) 
	{
		printf("I can't open f2.c!");
		return -1;
	}
	yyin = myfile;
	do{
		yyparse();
	}while (!feof(yyin));
	printf("numbers = %d\nKeywords = %d\nIdentifiers = %d\noperators = %d\n",dig, key,id, op);
}

void yyerror() {
	printf("EEK, parse error! Message: ");
	exit(-1);
}
----------------------------
prgm-7.c
----------------------------
#include<stdio.h>
int main()
{
	int count,j,n,time,flag=0,time_quantum,ch=0;
	int wait_time=0,turnaround_time=0,at[10],bt[10],rt[10];
	int endTime,i,smallest;
	int remain=0,sum_wait=0,sum_turnaround=0;
	printf("1.Round Robin \n2.SRTF \n");
	scanf("%d",&ch);
	printf("Enter no of Processes : ");
	scanf("%d",&n);
	for(i=0;i<n;i++)
	{
		printf("Enter arrival time for Process P%d : ",i+1);
		scanf("%d",&at[i]);
		printf("Enter burst time for Process P%d :",i+1);
		scanf("%d",&bt[i]);
		rt[i]=bt[i];
	}
	switch(ch)
	{
		case 1:
		printf("Enter Time Quantum:\t");
		scanf("%d",&time_quantum);
		remain=n;
		printf("\nProcess time|Turnaround Time|Waiting Time\n");
		for(time=0,count=0;remain!=0;)
		{
			if(rt[count]<=time_quantum && rt[count]>0)
			{
				time+=rt[count];
				rt[count]=0;
				flag=1;
			}
			else if(rt[count]>0)
			{
				rt[count]-=time_quantum;
				time+=time_quantum;
			}
			if(rt[count]==0 && flag==1)
			{
				remain--;
				printf("P[%d]\t|\t%d\t|\t%d\n",count+1,time-at[count],time-at[count]-bt[count]);
				wait_time+=time-at[count]-bt[count];
				turnaround_time+=time-at[count];
				flag=0;
			}
			if(count==n-1)
				count=0;
			else if(at[count+1]<=time)
				count++; 
			else
				count=0;
		}
		printf("\nAverage Waiting Time= %.2f\n",wait_time*1.0/n);
		printf("Avg Turnaround Time = %.2f\n",turnaround_time*1.0/n);
		break;
		case 2:
		remain=0;
		printf("\nProcesst|Turnaround Time| Waiting Timen\n");
		rt[9]=9999;
		for(time=0;remain!=n;time++)
		{
			smallest=9;
			for(i=0;i<n;i++)
				if(at[i]<=time && rt[i]<rt[smallest] && rt[i]>0)
					smallest=i;
			rt[smallest]--;
			if(rt[smallest]==0)
			{
				remain++;
				endTime=time+1;
				printf("\nP[%d]\t|\t%d\t|\t%d",smallest+1,endTime-at[smallest],endTime-bt[smallest]-at[smallest]);
				printf("\n");
				sum_wait+=endTime-bt[smallest]-at[smallest];
				sum_turnaround+=endTime-at[smallest];
			}
		}
		printf("\nAverage waiting time = %f\n",sum_wait*1.0/n);
		printf("Average Turnaround time = %f",sum_turnaround*1.0/n);
		break;
		default:
		printf("Invalid\n");
	}
	return 0;
}

----------------------------
prgm-8.c
----------------------------

#include <stdio.h>
#include <stdlib.h>
int main()
{
	int Max[10][10], need[10][10], alloc[10][10], avail[10], completed[10], safeSequence[10];
	int p, r, i, j, process, count;
	count = 0;
	printf("Enter the no of processes : ");
	scanf("%d", &p);
	for(i = 0; i< p; i++)
		completed[i] = 0;
	printf("Enter the no of resources : ");
	scanf("%d", &r);
	printf("Enter the Max Matrix for each process : ");
	for(i = 0; i < p; i++)
	{
		printf("\nFor process %d : ", i + 1);
		for(j = 0; j < r; j++)
			scanf("%d", &Max[i][j]);
	}
	printf("Enter the allocation for each process : ");
	for(i = 0; i < p; i++)
	{
		printf("\nFor process %d : ",i + 1);
		for(j = 0; j < r; j++)
			scanf("%d", &alloc[i][j]);
	}
	printf("Enter the Available Resources : ");
	for(i = 0; i < r; i++)
		scanf("%d", &avail[i]);
	for(i = 0; i < p; i++)
		for(j = 0; j < r; j++)
			need[i][j] = Max[i][j] - alloc[i][j];
	do
	{
		printf("Max matrix:\t\nAllocation matrix:\n");
		for(i = 0; i < p; i++)
		{
			for( j = 0; j < r; j++)
				printf("%d ", Max[i][j]);
			printf("\t\t");
			for( j = 0; j < r; j++)
				printf("%d ", alloc[i][j]);
			printf("\n");
		}
		process = -1;
		for(i = 0; i < p; i++)
		{
			if(completed[i] == 0)//if not completed
			{
				process = i ;
				for(j = 0; j < r; j++)
				{
					if(avail[j] < need[i][j])
					{
						process = -1;
						break;
					}
				}
			}
			if(process != -1)
			break;
		}
		if(process != -1)
		{
			printf("Process %d runs to completion!", process + 1);
			safeSequence[count] = process + 1;
			count++;
			for(j = 0; j < r; j++)
			{
				avail[j] += alloc[process][j];
				alloc[process][j] = 0;
				Max[process][j] = 0;
				completed[process] = 1;
			}
		}
	}
	while(count != p && process != -1);
	if(count == p)
	{
		printf("The system is in a safe state!!\n");
		printf("Safe Sequence : < ");
		for( i = 0; i < p; i++)
			printf("%d ", safeSequence[i]);
		printf(">\n");
	}
	else
		printf("The system is in an unsafe state!!");
}
